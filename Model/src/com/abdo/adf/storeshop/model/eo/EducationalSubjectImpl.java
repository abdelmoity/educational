package com.abdo.adf.storeshop.model.eo;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import oracle.jbo.Key;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Sep 15 23:57:46 EEST 2019
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class EducationalSubjectImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Id {
            public Object get(EducationalSubjectImpl obj) {
                return obj.getId();
            }

            public void put(EducationalSubjectImpl obj, Object value) {
                obj.setId((Number)value);
            }
        }
        ,
        EducationalLevel {
            public Object get(EducationalSubjectImpl obj) {
                return obj.getEducationalLevel();
            }

            public void put(EducationalSubjectImpl obj, Object value) {
                obj.setEducationalLevel((Number)value);
            }
        }
        ,
        Subject {
            public Object get(EducationalSubjectImpl obj) {
                return obj.getSubject();
            }

            public void put(EducationalSubjectImpl obj, Object value) {
                obj.setSubject((Number)value);
            }
        }
        ,
        Description {
            public Object get(EducationalSubjectImpl obj) {
                return obj.getDescription();
            }

            public void put(EducationalSubjectImpl obj, Object value) {
                obj.setDescription((String)value);
            }
        }
        ,
        Price {
            public Object get(EducationalSubjectImpl obj) {
                return obj.getPrice();
            }

            public void put(EducationalSubjectImpl obj, Object value) {
                obj.setPrice((Number)value);
            }
        }
        ,
        EducationalLevel1 {
            public Object get(EducationalSubjectImpl obj) {
                return obj.getEducationalLevel1();
            }

            public void put(EducationalSubjectImpl obj, Object value) {
                obj.setEducationalLevel1((EducationalLevelImpl)value);
            }
        }
        ,
        Subject1 {
            public Object get(EducationalSubjectImpl obj) {
                return obj.getSubject1();
            }

            public void put(EducationalSubjectImpl obj, Object value) {
                obj.setSubject1((SubjectImpl)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(EducationalSubjectImpl object);

        public abstract void put(EducationalSubjectImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int ID = AttributesEnum.Id.index();
    public static final int EDUCATIONALLEVEL = AttributesEnum.EducationalLevel.index();
    public static final int SUBJECT = AttributesEnum.Subject.index();
    public static final int DESCRIPTION = AttributesEnum.Description.index();
    public static final int PRICE = AttributesEnum.Price.index();
    public static final int EDUCATIONALLEVEL1 = AttributesEnum.EducationalLevel1.index();
    public static final int SUBJECT1 = AttributesEnum.Subject1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public EducationalSubjectImpl() {
    }

    /**
     * Gets the attribute value for Id, using the alias name Id.
     * @return the value of Id
     */
    public Number getId() {
        return (Number)getAttributeInternal(ID);
    }

    /**
     * Sets <code>value</code> as the attribute value for Id.
     * @param value value to set the Id
     */
    public void setId(Number value) {
        setAttributeInternal(ID, value);
    }

    /**
     * Gets the attribute value for EducationalLevel, using the alias name EducationalLevel.
     * @return the value of EducationalLevel
     */
    public Number getEducationalLevel() {
        return (Number)getAttributeInternal(EDUCATIONALLEVEL);
    }

    /**
     * Sets <code>value</code> as the attribute value for EducationalLevel.
     * @param value value to set the EducationalLevel
     */
    public void setEducationalLevel(Number value) {
        setAttributeInternal(EDUCATIONALLEVEL, value);
    }

    /**
     * Gets the attribute value for Subject, using the alias name Subject.
     * @return the value of Subject
     */
    public Number getSubject() {
        return (Number)getAttributeInternal(SUBJECT);
    }

    /**
     * Sets <code>value</code> as the attribute value for Subject.
     * @param value value to set the Subject
     */
    public void setSubject(Number value) {
        setAttributeInternal(SUBJECT, value);
    }

    /**
     * Gets the attribute value for Description, using the alias name Description.
     * @return the value of Description
     */
    public String getDescription() {
        return (String)getAttributeInternal(DESCRIPTION);
    }

    /**
     * Sets <code>value</code> as the attribute value for Description.
     * @param value value to set the Description
     */
    public void setDescription(String value) {
        setAttributeInternal(DESCRIPTION, value);
    }

    /**
     * Gets the attribute value for Price, using the alias name Price.
     * @return the value of Price
     */
    public Number getPrice() {
        return (Number)getAttributeInternal(PRICE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Price.
     * @param value value to set the Price
     */
    public void setPrice(Number value) {
        setAttributeInternal(PRICE, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity EducationalLevelImpl.
     */
    public EducationalLevelImpl getEducationalLevel1() {
        return (EducationalLevelImpl)getAttributeInternal(EDUCATIONALLEVEL1);
    }

    /**
     * Sets <code>value</code> as the associated entity EducationalLevelImpl.
     */
    public void setEducationalLevel1(EducationalLevelImpl value) {
        setAttributeInternal(EDUCATIONALLEVEL1, value);
    }

    /**
     * @return the associated entity SubjectImpl.
     */
    public SubjectImpl getSubject1() {
        return (SubjectImpl)getAttributeInternal(SUBJECT1);
    }

    /**
     * Sets <code>value</code> as the associated entity SubjectImpl.
     */
    public void setSubject1(SubjectImpl value) {
        setAttributeInternal(SUBJECT1, value);
    }

    /**
     * @param id key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number id) {
        return new Key(new Object[]{id});
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("com.abdo.adf.storeshop.model.eo.EducationalSubject");
    }
    
    protected synchronized void doDML(int operation, TransactionEvent e) {
       if(operation==DML_INSERT){
           try {
               setId(getNextId());
            
           } catch (SQLException f) {
               f.printStackTrace();
           }
       }
       super.doDML(operation, e);
    }
    
    private Number getNextId() throws SQLException {
       PreparedStatement ps = null;
       ResultSet rs = null;
       Number result=null ;
       try {
           String sql="SELECT nvl(max(C.ID),0)+1 from EDUCATIONAL_SUBJECT C ";
           ps = getDBTransaction().createPreparedStatement(sql, 0);
           rs = ps.executeQuery();
           if (rs.next()) {
               return new Number(rs.getString(1));
           }
           return result;
       } catch (Exception e) {
           e.printStackTrace();
       } finally {
           rs.close();
           ps.close();
       }
       return result;
    }
}
